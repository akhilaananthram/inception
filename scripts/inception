#!/usr/bin/env python
import logging
import inception
import json
import os
try:
  import cPickle as pkl
except ImportError:
  import pickle as pkl

class App(object):
    def __init__(self, args):
        self.args = args
        self.configure_app()
        
    def configure_app(self):
        logging.basicConfig(level=(logging.DEBUG if self.args.debug else (logging.INFO if self.args.verbose else logging.WARNING)), 
                            format="%(levelname)s: %(message)s")
        if self.args.boundingbox:
            self.args.boundingbox = [int(i) for i in self.args.boundingbox] 
        if self.args.preserve_scale:
            self.args.constrain_scale = 'xy'

    def run(self):
        # application main launch point
        logging.info("Running inception commandline")
        scene_description = None
        if os.path.isfile(self.args.scene_desc):
          scene_description = pkl.load(self.args.scene_desc)

        output = inception.magic_insert(self.args.source_image, self.args.dest_image, boundingbox=self.args.boundingbox, 
                                        constrain_scale=self.args.constrain_scale, generate_shadow=self.args.shadow,
                                        perform_statadjust=self.args.statadjust, scene_description=scene_description,
                                        **json.loads(self.args.kwargs))
        output.save(self.args.output)

if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser(description="A commandline object insertion tool")
    parser.add_argument('--source_image','-source','-s', metavar="FILEPATH", help="The filepath to the source image to insert",required=True)
    parser.add_argument('--dest_image','-dest','-e',metavar="FILEPATH",help="The filepath to the image to insert the source into",required=True)
    parser.add_argument('--scene_description', '-sd', dest="scene_desc", default="", help="The pickle file for the scene description of the background")
    parser.add_argument('--output','-o',metavar="FILEPATH",help="Where to output the resulting composition", default="output.png")
    parser.add_argument('--boundingbox','-bbox','-b',nargs=4,help="The bounding box for where to insert the source image in the dest image, given as four"
                                                            " coordinates corresponding to (upperleft.x, upperleft.y, lowerright.x, lowerright.y)")
    parser.add_argument('--constrain_scale',nargs=1,choices=['x','y','xy','X','Y','XY','both'],
                        help="Constrains the scale of inserted image to match the aspect ratio of the original source image."
                        " Takes in the dimension whose lower value should be respected. The other lower bounding box value is ignored in this case."
                        " Possible values include ('x', 'y', or 'both' (in which case original scale is preserved exactly)")
    parser.add_argument('--preserve_scale',action='store_true',help="Preserves the original scale of the source image exactly. In this case, only the first"
                        " two coordinates of the bounding box are respected.  Equivalent to --constrain_scale both")
    parser.add_argument('--skip_shadow','--skip_shadows',action='store_false',dest='shadow')
    parser.add_argument('--skip_statadjust',action='store_false',dest='statadjust')
    parser.add_argument('--kwargs', help='[Advanced] keyword arguments to pass through', default='{}')
    parser.add_argument('--verbose','-v', action='store_true', help="Turns on verbose output")
    parser.add_argument('--debug','-d', action='store_true', help="Turns on debug output")
    App(parser.parse_args()).run()
